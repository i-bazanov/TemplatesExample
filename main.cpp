#include <iostream>

/////////////////////////////////////////////////////////////////////////
///////////////////////////// class Odin_t //////////////////////////////
/////////////////////////////////////////////////////////////////////////
class Odin_t
{
public:

	static const char* const getText()
	{
		return "odin";
	}
};

/////////////////////////////////////////////////////////////////////////
///////////////////////////// class Dva_t ///////////////////////////////
/////////////////////////////////////////////////////////////////////////
class Dva_t
{
public:

	static const char* const getText()
	{
		return "dva";
	}
};

/////////////////////////////////////////////////////////////////////////
///////////////////////////// class Tri_t ///////////////////////////////
/////////////////////////////////////////////////////////////////////////
class Tri_t
{
public:

	static const char* const getText()
	{
		return "tri";
	}
};

/////////////////////////////////////////////////////////////////////////
/////////////////////////// TEMPLATE FUNCTION ///////////////////////////
///////////////////////// class Function_Print_t ////////////////////////
/////////// with static variadic template function -> print() ///////////
/////////////////////////////////////////////////////////////////////////
class Function_Print_t
{
public:

	template<class FirstDigit>
	static void print()
	{
		std::cout << FirstDigit::getText() << std::endl;
	}

	template<class FirstDigit, class SecondDigit, class ... Digits_t>
	static void print()
	{
		print<FirstDigit>();
		print<SecondDigit, Digits_t ...>();
	}
};

/////////////////////////////////////////////////////////////////////////
//////////////////////////////// COUNTER ////////////////////////////////
//////////////// variadic template class Counter_Print_t ////////////////
//////////////////// with static function -> print() ////////////////////
/////////////////////////////////////////////////////////////////////////
template<class FirstDigit, class ... Digits_t>
class Counter_Print_t
{
public:

	static void print(int counter = 0)
	{
		std::cout << FirstDigit::getText() << std::endl;

		if (counter != sizeof...(Digits_t))
		{
			++counter;
			Counter_Print_t<Digits_t ..., FirstDigit>::print(counter);
		}
	}
};

/////////////////////////////////////////////////////////////////////////
///////////////////////////////// SFINAE ////////////////////////////////
/////////////// variadic template class Enable_If_Print_t ///////////////
//////////////////// with static function -> print() ////////////////////
/////////////////////////////////////////////////////////////////////////
template<bool, class ... Digits_t>
class Enable_If_Print_t {};

template<class FirstDigit, class ... Digits_t>
class Enable_If_Print_t<true, FirstDigit, Digits_t...>
{
public:

	static void print()
	{
		std::cout << FirstDigit::getText() << std::endl;

		Enable_If_Print_t<sizeof...(Digits_t) != 0, Digits_t ...>::print();
	}
};

template<class ... Digits_t>
class Enable_If_Print_t<false, Digits_t...>
{
public:
	static void print() {};
};

/////////////////////////////////////////////////////////////////////////
/////////////////////// SFINAE - IMPROVED SOLUTION //////////////////////
/////////////// variadic template class Recursion_Print_t ///////////////
//////////////////// with static function -> print() ////////////////////
/////////////////////////////////////////////////////////////////////////
template<class ... Digits_t>
class Recursion_Print_t {};

template<class FirstDigit, class ... Digits_t>
class Recursion_Print_t<FirstDigit, Digits_t...>
{
public:

	static void print()
	{
		std::cout << FirstDigit::getText() << std::endl;
		Recursion_Print_t<Digits_t...>::print();
	}
};

template<>
class Recursion_Print_t<>
{
public:

	static void print() {};
};

/////////////////////////////////////////////////////////////////////////
///////////////////////////////// MAIN //////////////////////////////////
/////////////////////////////////////////////////////////////////////////
int main(int argc, char** argv)
{
	Function_Print_t::print<Odin_t, Dva_t, Tri_t>();

	std::cout << std::endl;

	Counter_Print_t<Tri_t, Dva_t, Odin_t>::print();

	std::cout << std::endl;

	Enable_If_Print_t<true, Dva_t, Dva_t, Tri_t, Tri_t, Odin_t, Odin_t>::print();

	std::cout << std::endl;

	Recursion_Print_t<Odin_t, Dva_t, Tri_t, Dva_t, Odin_t>::print();

	return 0;
}